[{"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\index.js":"1","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\App.js":"2","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\layout\\Navbar.js":"3","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\layout\\Landing.js":"4","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\auth\\Register.js":"5","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\auth\\Login.js":"6","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\store.js":"7","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\reducers\\index.js":"8","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\reducers\\alert.js":"9","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\actions\\types.js":"10","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\actions\\alert.js":"11","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\layout\\Alert.js":"12","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\reducers\\auth.js":"13","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\actions\\auth.js":"14","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\utils\\setAuthToken.js":"15","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\dashboard\\Dashboard.js":"16","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\routing\\PrivateRoute.js":"17","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\reducers\\profile.js":"18","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\actions\\profile.js":"19","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\layout\\Spinner.js":"20","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\profile-form\\CreateProfile.js":"21","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\dashboard\\DashboardActions.js":"22","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\profile-form\\EditProfile.js":"23","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\profile-form\\AddExperience.js":"24","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\profile-form\\AddEducation.js":"25","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\dashboard\\Experience.js":"26","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\dashboard\\Education.js":"27"},{"size":146,"mtime":1611657740995,"results":"28","hashOfConfig":"29"},{"size":1902,"mtime":1611840875882,"results":"30","hashOfConfig":"29"},{"size":1448,"mtime":1611802051769,"results":"31","hashOfConfig":"29"},{"size":1055,"mtime":1611802192212,"results":"32","hashOfConfig":"29"},{"size":3347,"mtime":1611736282414,"results":"33","hashOfConfig":"29"},{"size":1843,"mtime":1611736184146,"results":"34","hashOfConfig":"29"},{"size":389,"mtime":1611669892720,"results":"35","hashOfConfig":"29"},{"size":200,"mtime":1611753779504,"results":"36","hashOfConfig":"29"},{"size":518,"mtime":1611673045057,"results":"37","hashOfConfig":"29"},{"size":624,"mtime":1611993772917,"results":"38","hashOfConfig":"29"},{"size":414,"mtime":1611673196637,"results":"39","hashOfConfig":"29"},{"size":525,"mtime":1611672535844,"results":"40","hashOfConfig":"29"},{"size":1003,"mtime":1611994050558,"results":"41","hashOfConfig":"29"},{"size":1969,"mtime":1611803380324,"results":"42","hashOfConfig":"29"},{"size":246,"mtime":1611734720469,"results":"43","hashOfConfig":"29"},{"size":1820,"mtime":1611842152370,"results":"44","hashOfConfig":"29"},{"size":589,"mtime":1611753562371,"results":"45","hashOfConfig":"29"},{"size":690,"mtime":1611994032661,"results":"46","hashOfConfig":"29"},{"size":4220,"mtime":1611993997862,"results":"47","hashOfConfig":"29"},{"size":294,"mtime":1611802918643,"results":"48","hashOfConfig":"29"},{"size":5917,"mtime":1611838021121,"results":"49","hashOfConfig":"29"},{"size":651,"mtime":1611823376649,"results":"50","hashOfConfig":"29"},{"size":7010,"mtime":1611824863382,"results":"51","hashOfConfig":"29"},{"size":3001,"mtime":1611839987853,"results":"52","hashOfConfig":"29"},{"size":3042,"mtime":1611840952019,"results":"53","hashOfConfig":"29"},{"size":1589,"mtime":1611994149246,"results":"54","hashOfConfig":"29"},{"size":1599,"mtime":1611994455398,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"5iqzrn",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\index.js",[],["117","118"],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\App.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\layout\\Navbar.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\layout\\Landing.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\auth\\Register.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\auth\\Login.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\store.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\reducers\\index.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\reducers\\alert.js",["119"],"import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\r\nconst initialState = [];\r\n\r\nexport default function(state = initialState, action) {\r\n\tconst { type, payload } = action;\r\n\r\n\tswitch (type) {\r\n\t\tcase SET_ALERT:\r\n\t\t\tconst temp = state.filter((alert) => alert.msg === payload.msg);\r\n\t\t\tif (temp.length === 0) {\r\n\t\t\t\treturn [ ...state, payload ];\r\n\t\t\t} else {\r\n\t\t\t\treturn [ ...state ];\r\n\t\t\t}\r\n\r\n\t\tcase REMOVE_ALERT:\r\n\t\t\treturn state.filter((alert) => alert.id !== payload);\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\actions\\types.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\actions\\alert.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\layout\\Alert.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\reducers\\auth.js",["120"],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\actions\\auth.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\utils\\setAuthToken.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\dashboard\\Dashboard.js",["121"],"import React, { useEffect, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport DashboardActions from '../dashboard/DashboardActions';\r\nimport Experience from './Experience';\r\nimport Education from './Education';\r\n\r\nimport { getCurrentUserProfile } from '../../actions/profile';\r\n\r\nconst Dashboard = ({ getCurrentUserProfile, auth: { user }, profile: { profile, loading } }) => {\r\n\tuseEffect(() => {\r\n\t\tgetCurrentUserProfile();\r\n\t}, []);\r\n\r\n\treturn loading && profile === null ? (\r\n\t\t<Spinner />\r\n\t) : (\r\n\t\t<Fragment>\r\n\t\t\t<h1 className='large text-primary'>Dashboard</h1>\r\n\t\t\t<p className='lead'>\r\n\t\t\t\t<i className='fas fa-user' /> Welcome <strong>{user && user.name}</strong>\r\n\t\t\t</p>\r\n\r\n\t\t\t{profile != null ? (\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<h2 className='my-2'>Education Credentials</h2>\r\n\t\t\t\t\t<DashboardActions />\r\n\t\t\t\t\t<Experience experience={profile.experience} />\r\n\t\t\t\t\t<Education education={profile.education} />\r\n\t\t\t\t\t<div className='my-2'>\r\n\t\t\t\t\t\t<button className='btn btn-danger'>\r\n\t\t\t\t\t\t\t<i className='fas fa-user-minus' />\r\n\t\t\t\t\t\t\tDelete My Account\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Fragment>\r\n\t\t\t) : (\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<p>You have not yet setup a profile , Please create one.</p>\r\n\t\t\t\t\t<Link to='/create-profile' className='btn btn-primary my-1'>\r\n\t\t\t\t\t\tCreate Profile\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</Fragment>\r\n\t\t\t)}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nDashboard.propTypes = {\r\n\tgetCurrentUserProfile: PropTypes.func.isRequired,\r\n\tauth: PropTypes.object.isRequired,\r\n\tprofile: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tauth: state.auth,\r\n\tprofile: state.profile\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCurrentUserProfile })(Dashboard);\r\n","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\routing\\PrivateRoute.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\reducers\\profile.js",["122"],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\actions\\profile.js",["123"],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\layout\\Spinner.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\profile-form\\CreateProfile.js",["124"],"import React, { useState, Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createProfile } from '../../actions/profile';\r\n\r\nconst CreateProfile = ({ createProfile, history }) => {\r\n\tconst [ formData, setFormData ] = useState({\r\n\t\tcompany: '',\r\n\t\twebsite: '',\r\n\t\tlocation: '',\r\n\t\tstatus: '',\r\n\t\tskills: '',\r\n\t\tbio: '',\r\n\t\tgithubusername: '',\r\n\t\ttwitter: '',\r\n\t\tfacebook: '',\r\n\t\tlinkedin: '',\r\n\t\tyoutube: '',\r\n\t\tinstagram: ''\r\n\t});\r\n\r\n\tconst [ displaySocialInputs, toggleSocialInputs ] = useState(false);\r\n\r\n\tconst {\r\n\t\tcompany,\r\n\t\twebsite,\r\n\t\tlocation,\r\n\t\tstatus,\r\n\t\tskills,\r\n\t\tbio,\r\n\t\tgithubusername,\r\n\t\ttwitter,\r\n\t\tfacebook,\r\n\t\tlinkedin,\r\n\t\tyoutube,\r\n\t\tinstagram\r\n\t} = formData;\r\n\r\n\tconst onChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n\tconst onSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tcreateProfile(formData, history);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h1 className='large text-primary'>Create Your Profile</h1>\r\n\t\t\t<p className='lead'>\r\n\t\t\t\t<i className='fas fa-user' /> Let's get some information to make your profile stand out\r\n\t\t\t</p>\r\n\t\t\t<small>* = required field</small>\r\n\t\t\t<form className='form' onSubmit={(e) => onSubmit(e)}>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<select name='status' value={status} onChange={(e) => onChange(e)}>\r\n\t\t\t\t\t\t<option value='0'>* Select Professional Status</option>\r\n\t\t\t\t\t\t<option value='Developer'>Developer</option>\r\n\t\t\t\t\t\t<option value='Junior Developer'>Junior Developer</option>\r\n\t\t\t\t\t\t<option value='Senior Developer'>Senior Developer</option>\r\n\t\t\t\t\t\t<option value='Manager'>Manager</option>\r\n\t\t\t\t\t\t<option value='Student or Learning'>Student or Learning</option>\r\n\t\t\t\t\t\t<option value='Instructor'>Instructor or Teacher</option>\r\n\t\t\t\t\t\t<option value='Intern'>Intern</option>\r\n\t\t\t\t\t\t<option value='Other'>Other</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t<small className='form-text'>Give us an idea of where you are at in your career</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Company'\r\n\t\t\t\t\t\tname='company'\r\n\t\t\t\t\t\tvalue={company}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>Could be your own company or one you work for</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Website'\r\n\t\t\t\t\t\tname='website'\r\n\t\t\t\t\t\tvalue={website}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>Could be your own or a company website</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Location'\r\n\t\t\t\t\t\tname='location'\r\n\t\t\t\t\t\tvalue={location}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>City & state suggested (eg. Boston, MA)</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='* Skills'\r\n\t\t\t\t\t\tname='skills'\r\n\t\t\t\t\t\tvalue={skills}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>Please use comma separated values (eg. HTML,CSS,JavaScript,PHP)</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Github Username'\r\n\t\t\t\t\t\tname='githubusername'\r\n\t\t\t\t\t\tvalue={githubusername}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>\r\n\t\t\t\t\t\tIf you want your latest repos and a Github link, include your username\r\n\t\t\t\t\t</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tplaceholder='A short bio of yourself'\r\n\t\t\t\t\t\tname='bio'\r\n\t\t\t\t\t\tvalue={bio}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>Tell us a little about yourself</small>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className='my-2'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\tclassName='btn btn-dark'\r\n\t\t\t\t\t\tonClick={() => toggleSocialInputs(!displaySocialInputs)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tAdd Social Network Links\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<span>Optional</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{displaySocialInputs && (\r\n\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-twitter fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='Twitter URL'\r\n\t\t\t\t\t\t\t\tname='twitter'\r\n\t\t\t\t\t\t\t\tvalue={twitter}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-facebook fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='Facebook URL'\r\n\t\t\t\t\t\t\t\tname='facebook'\r\n\t\t\t\t\t\t\t\tvalue={facebook}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-youtube fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='YouTube URL'\r\n\t\t\t\t\t\t\t\tname='youtube'\r\n\t\t\t\t\t\t\t\tvalue={youtube}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-linkedin fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='Linkedin URL'\r\n\t\t\t\t\t\t\t\tname='linkedin'\r\n\t\t\t\t\t\t\t\tvalue={linkedin}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-instagram fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='Instagram URL'\r\n\t\t\t\t\t\t\t\tname='instagram'\r\n\t\t\t\t\t\t\t\tvalue={instagram}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Fragment>\r\n\t\t\t\t)}\r\n\t\t\t\t<input type='submit' className='btn btn-primary my-1' />\r\n\t\t\t\t<a className='btn btn-light my-1' href='dashboard.html'>\r\n\t\t\t\t\tGo Back\r\n\t\t\t\t</a>\r\n\t\t\t</form>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nCreateProfile.propTypes = {\r\n\tcreateProfile: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { createProfile })(withRouter(CreateProfile));\r\n","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\dashboard\\DashboardActions.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\profile-form\\EditProfile.js",["125","126"],"import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createProfile, getCurrentUserProfile } from '../../actions/profile';\r\n\r\nconst EditProfile = ({ createProfile, history, getCurrentUserProfile, profile: { profile, loading } }) => {\r\n\tconst [ formData, setFormData ] = useState({\r\n\t\tcompany: '',\r\n\t\twebsite: '',\r\n\t\tlocation: '',\r\n\t\tstatus: '',\r\n\t\tskills: '',\r\n\t\tbio: '',\r\n\t\tgithubusername: '',\r\n\t\ttwitter: '',\r\n\t\tfacebook: '',\r\n\t\tlinkedin: '',\r\n\t\tyoutube: '',\r\n\t\tinstagram: ''\r\n\t});\r\n\r\n\tconst [ displaySocialInputs, toggleSocialInputs ] = useState(false);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tgetCurrentUserProfile();\r\n\r\n\t\t\tsetFormData({\r\n\t\t\t\tcompany: loading || !profile.company ? '' : profile.company,\r\n\t\t\t\twebsite: loading || !profile.website ? '' : profile.website,\r\n\t\t\t\tlocation: loading || !profile.location ? '' : profile.location,\r\n\t\t\t\tstatus: loading || !profile.status ? '' : profile.status,\r\n\t\t\t\tskills: loading || !profile.skills ? '' : profile.skills,\r\n\t\t\t\tgithubusername: loading || !profile.githubusername ? '' : profile.githubusername,\r\n\t\t\t\tbio: loading || !profile.bio ? '' : profile.bio,\r\n\t\t\t\ttwitter: loading || !profile.social ? '' : profile.social.twitter,\r\n\t\t\t\tfacebook: loading || !profile.social ? '' : profile.social.facebook,\r\n\t\t\t\tlinkedin: loading || !profile.social ? '' : profile.social.linkedin,\r\n\t\t\t\tyoutube: loading || !profile.social ? '' : profile.social.youtube,\r\n\t\t\t\tinstagram: loading || !profile.social ? '' : profile.social.instagram\r\n\t\t\t});\r\n\t\t},\r\n\t\t[ loading ]\r\n\t);\r\n\r\n\tconst {\r\n\t\tcompany,\r\n\t\twebsite,\r\n\t\tlocation,\r\n\t\tstatus,\r\n\t\tskills,\r\n\t\tbio,\r\n\t\tgithubusername,\r\n\t\ttwitter,\r\n\t\tfacebook,\r\n\t\tlinkedin,\r\n\t\tyoutube,\r\n\t\tinstagram\r\n\t} = formData;\r\n\r\n\tconst onChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n\tconst onSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tcreateProfile(formData, history, true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h1 className='large text-primary'>Edit Profile</h1>\r\n\r\n\t\t\t<small>* = required field</small>\r\n\t\t\t<form className='form' onSubmit={(e) => onSubmit(e)}>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<select name='status' value={status} onChange={(e) => onChange(e)}>\r\n\t\t\t\t\t\t<option value='0'>* Select Professional Status</option>\r\n\t\t\t\t\t\t<option value='Developer'>Developer</option>\r\n\t\t\t\t\t\t<option value='Junior Developer'>Junior Developer</option>\r\n\t\t\t\t\t\t<option value='Senior Developer'>Senior Developer</option>\r\n\t\t\t\t\t\t<option value='Manager'>Manager</option>\r\n\t\t\t\t\t\t<option value='Student or Learning'>Student or Learning</option>\r\n\t\t\t\t\t\t<option value='Instructor'>Instructor or Teacher</option>\r\n\t\t\t\t\t\t<option value='Intern'>Intern</option>\r\n\t\t\t\t\t\t<option value='Other'>Other</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t<small className='form-text'>Give us an idea of where you are at in your career</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Company'\r\n\t\t\t\t\t\tname='company'\r\n\t\t\t\t\t\tvalue={company}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>Could be your own company or one you work for</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Website'\r\n\t\t\t\t\t\tname='website'\r\n\t\t\t\t\t\tvalue={website}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>Could be your own or a company website</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Location'\r\n\t\t\t\t\t\tname='location'\r\n\t\t\t\t\t\tvalue={location}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>City & state suggested (eg. Boston, MA)</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='* Skills'\r\n\t\t\t\t\t\tname='skills'\r\n\t\t\t\t\t\tvalue={skills}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>Please use comma separated values (eg. HTML,CSS,JavaScript,PHP)</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Github Username'\r\n\t\t\t\t\t\tname='githubusername'\r\n\t\t\t\t\t\tvalue={githubusername}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>\r\n\t\t\t\t\t\tIf you want your latest repos and a Github link, include your username\r\n\t\t\t\t\t</small>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tplaceholder='A short bio of yourself'\r\n\t\t\t\t\t\tname='bio'\r\n\t\t\t\t\t\tvalue={bio}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<small className='form-text'>Tell us a little about yourself</small>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className='my-2'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\tclassName='btn btn-dark'\r\n\t\t\t\t\t\tonClick={() => toggleSocialInputs(!displaySocialInputs)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tAdd Social Network Links\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<span>Optional</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{displaySocialInputs && (\r\n\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-twitter fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='Twitter URL'\r\n\t\t\t\t\t\t\t\tname='twitter'\r\n\t\t\t\t\t\t\t\tvalue={twitter}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-facebook fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='Facebook URL'\r\n\t\t\t\t\t\t\t\tname='facebook'\r\n\t\t\t\t\t\t\t\tvalue={facebook}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-youtube fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='YouTube URL'\r\n\t\t\t\t\t\t\t\tname='youtube'\r\n\t\t\t\t\t\t\t\tvalue={youtube}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-linkedin fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='Linkedin URL'\r\n\t\t\t\t\t\t\t\tname='linkedin'\r\n\t\t\t\t\t\t\t\tvalue={linkedin}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group social-input'>\r\n\t\t\t\t\t\t\t<i className='fab fa-instagram fa-2x' />\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder='Instagram URL'\r\n\t\t\t\t\t\t\t\tname='instagram'\r\n\t\t\t\t\t\t\t\tvalue={instagram}\r\n\t\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Fragment>\r\n\t\t\t\t)}\r\n\t\t\t\t<input type='submit' className='btn btn-primary my-1' />\r\n\t\t\t\t<a className='btn btn-light my-1' href='/dashboard'>\r\n\t\t\t\t\tGo Back\r\n\t\t\t\t</a>\r\n\t\t\t</form>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nEditProfile.propTypes = {\r\n\tcreateProfile: PropTypes.func.isRequired,\r\n\tgetCurrentUserProfile: PropTypes.func.isRequired,\r\n\tprofile: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tprofile: state.profile\r\n});\r\n\r\nexport default connect(mapStateToProps, { createProfile, getCurrentUserProfile })(withRouter(EditProfile));\r\n","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\profile-form\\AddExperience.js",["127"],"import React, { Fragment, useState } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addExperience } from '../../actions/profile';\r\n\r\nconst AddExperience = ({ addExperience, history }) => {\r\n\tconst [ formData, setFormData ] = useState({\r\n\t\tcompany: '',\r\n\t\ttitle: '',\r\n\t\tlocation: '',\r\n\t\tfrom: '',\r\n\t\tto: '',\r\n\t\tcurrent: false,\r\n\t\tdescription: ''\r\n\t});\r\n\r\n\tconst [ toDateDisabled, toggleDisabled ] = useState(false);\r\n\r\n\tconst { company, title, location, from, to, current, description } = formData;\r\n\r\n\tconst onChange = (e) => {\r\n\t\tsetFormData({ ...formData, [e.target.name]: e.target.value });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h1 class='large text-primary'>Add An Experience</h1>\r\n\t\t\t<p class='lead'>\r\n\t\t\t\t<i class='fas fa-code-branch' /> Add any developer/programming positions that you have had in the past\r\n\t\t\t</p>\r\n\t\t\t<small>* = required field</small>\r\n\t\t\t<form\r\n\t\t\t\tclass='form'\r\n\t\t\t\tonSubmit={(e) => {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\taddExperience(formData, history);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='* Job Title'\r\n\t\t\t\t\t\tname='title'\r\n\t\t\t\t\t\tvalue={title}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='* Company'\r\n\t\t\t\t\t\tname='company'\r\n\t\t\t\t\t\tvalue={company}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Location'\r\n\t\t\t\t\t\tname='location'\r\n\t\t\t\t\t\tvalue={location}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<h4>From Date</h4>\r\n\t\t\t\t\t<input type='date' name='from' value={from} onChange={(e) => onChange(e)} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\t\t\tname='current'\r\n\t\t\t\t\t\t\tvalue={current}\r\n\t\t\t\t\t\t\tchecked={current}\r\n\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\tsetFormData({ ...formData, current: !current });\r\n\t\t\t\t\t\t\t\ttoggleDisabled(!toDateDisabled);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>{' '}\r\n\t\t\t\t\t\tCurrent Job\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<h4>To Date</h4>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='date'\r\n\t\t\t\t\t\tname='to'\r\n\t\t\t\t\t\tvalue={to}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\tdisabled={toDateDisabled ? 'disabled' : ''}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tname='description'\r\n\t\t\t\t\t\tcols='30'\r\n\t\t\t\t\t\trows='5'\r\n\t\t\t\t\t\tplaceholder='Job Description'\r\n\t\t\t\t\t\tvalue={description}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input type='submit' class='btn btn-primary my-1' />\r\n\t\t\t\t<a class='btn btn-light my-1' href='/dashboard'>\r\n\t\t\t\t\tGo Back\r\n\t\t\t\t</a>\r\n\t\t\t</form>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nAddExperience.propTypes = {\r\n\taddExperience: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { addExperience })(withRouter(AddExperience));\r\n","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\profile-form\\AddEducation.js",["128"],"import React, { Fragment, useState } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addEducation } from '../../actions/profile';\r\n\r\nconst AddEducation = ({ addEducation, history }) => {\r\n\tconst [ formData, setFormData ] = useState({\r\n\t\tschool: '',\r\n\t\tdegree: '',\r\n\t\tfieldOfStudy: '',\r\n\t\tfrom: '',\r\n\t\tto: '',\r\n\t\tcurrent: false,\r\n\t\tdescription: ''\r\n\t});\r\n\r\n\tconst [ toDateDisabled, toggleDisabled ] = useState(false);\r\n\r\n\tconst { school, degree, fieldOfStudy, from, to, current, description } = formData;\r\n\r\n\tconst onChange = (e) => {\r\n\t\tsetFormData({ ...formData, [e.target.name]: e.target.value });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h1 class='large text-primary'>Add your Education</h1>\r\n\t\t\t<p class='lead'>\r\n\t\t\t\t<i class='fas fa-code-branch' /> Add any school or bootcamp that you have attended\r\n\t\t\t</p>\r\n\t\t\t<small>* = required field</small>\r\n\t\t\t<form\r\n\t\t\t\tclass='form'\r\n\t\t\t\tonSubmit={(e) => {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\taddEducation(formData, history);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='* School , College or Bootcamp'\r\n\t\t\t\t\t\tname='school'\r\n\t\t\t\t\t\tvalue={school}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='* Degree or Certification'\r\n\t\t\t\t\t\tname='degree'\r\n\t\t\t\t\t\tvalue={degree}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Field of Study'\r\n\t\t\t\t\t\tname='fieldOfStudy'\r\n\t\t\t\t\t\tvalue={fieldOfStudy}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<h4>From Date</h4>\r\n\t\t\t\t\t<input type='date' name='from' value={from} onChange={(e) => onChange(e)} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\t\t\tname='current'\r\n\t\t\t\t\t\t\tvalue={current}\r\n\t\t\t\t\t\t\tchecked={current}\r\n\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\tsetFormData({ ...formData, current: !current });\r\n\t\t\t\t\t\t\t\ttoggleDisabled(!toDateDisabled);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>{' '}\r\n\t\t\t\t\t\tCurrently persuing\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<h4>To Date</h4>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='date'\r\n\t\t\t\t\t\tname='to'\r\n\t\t\t\t\t\tvalue={to}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\tdisabled={toDateDisabled ? 'disabled' : ''}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='form-group'>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tname='description'\r\n\t\t\t\t\t\tcols='30'\r\n\t\t\t\t\t\trows='5'\r\n\t\t\t\t\t\tplaceholder='Program Description'\r\n\t\t\t\t\t\tvalue={description}\r\n\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input type='submit' class='btn btn-primary my-1' />\r\n\t\t\t\t<a class='btn btn-light my-1' href='/dashboard'>\r\n\t\t\t\t\tGo Back\r\n\t\t\t\t</a>\r\n\t\t\t</form>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nAddEducation.propTypes = {\r\n\taddEducation: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { addEducation })(withRouter(AddEducation));\r\n","D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\dashboard\\Experience.js",[],"D:\\udemy\\MERNCourse\\DevConnector\\client\\src\\components\\dashboard\\Education.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":4,"column":1,"nodeType":"135","endLine":21,"endColumn":2},{"ruleId":"133","severity":1,"message":"134","line":19,"column":1,"nodeType":"135","endLine":53,"endColumn":2},{"ruleId":"136","severity":1,"message":"137","line":15,"column":5,"nodeType":"138","endLine":15,"endColumn":7,"suggestions":"139"},{"ruleId":"133","severity":1,"message":"134","line":11,"column":1,"nodeType":"135","endLine":39,"endColumn":2},{"ruleId":"140","severity":1,"message":"141","line":163,"column":10,"nodeType":"142","messageId":"143","endLine":163,"endColumn":13},{"ruleId":"140","severity":1,"message":"144","line":2,"column":10,"nodeType":"142","messageId":"143","endLine":2,"endColumn":14},{"ruleId":"140","severity":1,"message":"144","line":2,"column":10,"nodeType":"142","messageId":"143","endLine":2,"endColumn":14},{"ruleId":"136","severity":1,"message":"145","line":44,"column":3,"nodeType":"138","endLine":44,"endColumn":14,"suggestions":"146"},{"ruleId":"140","severity":1,"message":"144","line":2,"column":10,"nodeType":"142","messageId":"143","endLine":2,"endColumn":14},{"ruleId":"140","severity":1,"message":"144","line":2,"column":10,"nodeType":"142","messageId":"143","endLine":2,"endColumn":14},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentUserProfile'. Either include it or remove the dependency array. If 'getCurrentUserProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["149"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getCurrentUserProfile', 'profile.bio', 'profile.company', 'profile.githubusername', 'profile.location', 'profile.skills', 'profile.social', 'profile.status', and 'profile.website'. Either include them or remove the dependency array. If 'getCurrentUserProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [getCurrentUserProfile]",{"range":"155","text":"156"},"Update the dependencies array to be: [getCurrentUserProfile, loading, profile.bio, profile.company, profile.githubusername, profile.location, profile.skills, profile.social, profile.status, profile.website]",{"range":"157","text":"158"},[574,576],"[getCurrentUserProfile]",[1633,1644],"[getCurrentUserProfile, loading, profile.bio, profile.company, profile.githubusername, profile.location, profile.skills, profile.social, profile.status, profile.website]"]